// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PARTNER.Context;

namespace PARTNER.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220225192442_InitalCreated")]
    partial class InitalCreated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PARTNER.Models.Branch", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FacultyCode")
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("Code");

                    b.HasIndex("FacultyCode");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("PARTNER.Models.Check", b =>
                {
                    b.Property<int>("CheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Timee")
                        .HasColumnType("int");

                    b.Property<int?>("Uzlashtirish")
                        .HasColumnType("int");

                    b.Property<string>("YearMonth")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)");

                    b.HasKey("CheckId");

                    b.HasIndex("StudentId");

                    b.ToTable("CHECK");
                });

            modelBuilder.Entity("PARTNER.Models.District", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("RegionCode")
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Code");

                    b.HasIndex("RegionCode");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("PARTNER.Models.Faculty", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UnverstyCode")
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("Code");

                    b.HasIndex("UnverstyCode");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("PARTNER.Models.Group", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("TyutorId")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("BranchCode");

                    b.HasIndex("TyutorId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("PARTNER.Models.Interist", b =>
                {
                    b.Property<int>("InteristId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Art")
                        .HasColumnType("int");

                    b.Property<string>("BoshqaSoxa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Music")
                        .HasColumnType("int");

                    b.Property<int?>("Scientific")
                        .HasColumnType("int");

                    b.Property<int?>("Sport")
                        .HasColumnType("int");

                    b.HasKey("InteristId");

                    b.ToTable("Interists");
                });

            modelBuilder.Entity("PARTNER.Models.LiveReady", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("nvarchar(4)");

                    b.Property<int?>("LiveType")
                        .HasColumnType("int");

                    b.Property<string>("Mahalla")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.HasIndex("DistrictCode");

                    b.ToTable("LiveReadies");
                });

            modelBuilder.Entity("PARTNER.Models.Nogiron", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("NogironName")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<int?>("Typeee")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.ToTable("Nogirons");
                });

            modelBuilder.Entity("PARTNER.Models.Parents", b =>
                {
                    b.Property<int>("ParentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Job")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Mahalla")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNamber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NogironCode")
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("ParentsType")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<string>("RegionCode")
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("SureName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TelegramNamber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentsId");

                    b.HasIndex("DistrictCode");

                    b.HasIndex("NogironCode");

                    b.HasIndex("RegionCode");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("PARTNER.Models.Region", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("RegionName")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("Code");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("PARTNER.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Boquvchi")
                        .HasColumnType("int");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(7)");

                    b.Property<int?>("Contract")
                        .HasColumnType("int");

                    b.Property<int>("Cours")
                        .HasColumnType("int");

                    b.Property<int?>("Degree")
                        .HasColumnType("int");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("FacultyCode")
                        .HasColumnType("nvarchar(7)");

                    b.Property<int?>("Familly")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GroupCode")
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("InteristId")
                        .HasColumnType("int");

                    b.Property<int?>("KamTam")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LiveReadyCode")
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Mahalla")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNamber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Nation")
                        .HasColumnType("int");

                    b.Property<string>("NogironCode")
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("ParentsId")
                        .HasColumnType("int");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RegionCode")
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("SureName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TelegramNamber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnverstyCode")
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("StudentId");

                    b.HasIndex("BranchCode");

                    b.HasIndex("DistrictCode");

                    b.HasIndex("FacultyCode");

                    b.HasIndex("GroupCode");

                    b.HasIndex("InteristId");

                    b.HasIndex("LiveReadyCode");

                    b.HasIndex("NogironCode");

                    b.HasIndex("ParentsId");

                    b.HasIndex("RegionCode");

                    b.HasIndex("UnverstyCode");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("PARTNER.Models.Tyutor", b =>
                {
                    b.Property<int>("TyutorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Degree")
                        .HasColumnType("int");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MobileNamber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhotoFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionCode")
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Resime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Staj")
                        .HasColumnType("int");

                    b.Property<string>("SureName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TelegramNamber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TyutorId");

                    b.HasIndex("DistrictCode");

                    b.HasIndex("RegionCode");

                    b.ToTable("Tyutors");
                });

            modelBuilder.Entity("PARTNER.Models.Unversty", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("RegionCode")
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("UnverstyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Code");

                    b.HasIndex("RegionCode");

                    b.ToTable("Unversties");
                });

            modelBuilder.Entity("PARTNER.Models.Branch", b =>
                {
                    b.HasOne("PARTNER.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyCode");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("PARTNER.Models.Check", b =>
                {
                    b.HasOne("PARTNER.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("PARTNER.Models.District", b =>
                {
                    b.HasOne("PARTNER.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionCode");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("PARTNER.Models.Faculty", b =>
                {
                    b.HasOne("PARTNER.Models.Unversty", "Unversty")
                        .WithMany()
                        .HasForeignKey("UnverstyCode");

                    b.Navigation("Unversty");
                });

            modelBuilder.Entity("PARTNER.Models.Group", b =>
                {
                    b.HasOne("PARTNER.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchCode");

                    b.HasOne("PARTNER.Models.Tyutor", "Tyutor")
                        .WithMany()
                        .HasForeignKey("TyutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Tyutor");
                });

            modelBuilder.Entity("PARTNER.Models.LiveReady", b =>
                {
                    b.HasOne("PARTNER.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictCode");

                    b.Navigation("District");
                });

            modelBuilder.Entity("PARTNER.Models.Parents", b =>
                {
                    b.HasOne("PARTNER.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictCode");

                    b.HasOne("PARTNER.Models.Nogiron", "Nogiron")
                        .WithMany()
                        .HasForeignKey("NogironCode");

                    b.HasOne("PARTNER.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionCode");

                    b.Navigation("District");

                    b.Navigation("Nogiron");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("PARTNER.Models.Student", b =>
                {
                    b.HasOne("PARTNER.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchCode");

                    b.HasOne("PARTNER.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictCode");

                    b.HasOne("PARTNER.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyCode");

                    b.HasOne("PARTNER.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupCode");

                    b.HasOne("PARTNER.Models.Interist", "Interist")
                        .WithMany()
                        .HasForeignKey("InteristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PARTNER.Models.LiveReady", "LiveReady")
                        .WithMany()
                        .HasForeignKey("LiveReadyCode");

                    b.HasOne("PARTNER.Models.Nogiron", "Nogiron")
                        .WithMany()
                        .HasForeignKey("NogironCode");

                    b.HasOne("PARTNER.Models.Parents", "Parents")
                        .WithMany()
                        .HasForeignKey("ParentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PARTNER.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionCode");

                    b.HasOne("PARTNER.Models.Unversty", "Unversty")
                        .WithMany()
                        .HasForeignKey("UnverstyCode");

                    b.Navigation("Branch");

                    b.Navigation("District");

                    b.Navigation("Faculty");

                    b.Navigation("Group");

                    b.Navigation("Interist");

                    b.Navigation("LiveReady");

                    b.Navigation("Nogiron");

                    b.Navigation("Parents");

                    b.Navigation("Region");

                    b.Navigation("Unversty");
                });

            modelBuilder.Entity("PARTNER.Models.Tyutor", b =>
                {
                    b.HasOne("PARTNER.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictCode");

                    b.HasOne("PARTNER.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionCode");

                    b.Navigation("District");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("PARTNER.Models.Unversty", b =>
                {
                    b.HasOne("PARTNER.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionCode");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
